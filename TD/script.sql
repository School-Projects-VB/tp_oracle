-- ADMIN BDD TD final - DEV B
-- Auteur: Victor BETSCH
-- Date de rendue maximum : 06/12/2022 à 18h
-- Coefficient : 3
-- Temps conseillé : 8h
-- Sujet choisi: Plateforme de musiques (SpotHiFi)


--------------------- PARTIE 1 ---------------------

/*
    ----- EXPLICATION -----

    (Partie 1) Je vais ici créer une base de données sécurisée d'une plateforme de musiques (SpotHiFi).
    J'entends par "sécurisée" une base de données structurée constituée de tables
    (LISTENINGS, SONGS, PLAYLISTS, ALBUMS, ARTISTS, AUDITORS), de contraintes d'intégrité (PRIMARY KEY et FOREIGN KEY pour relier
    toutes les tables) et de tablespaces (TBS_LABELS, TBS_CLIENTS, TD_TBS_ARCHIVE, TBS_USERDATA).

    (Partie 2) La base sera administrée par 4 utilisateurs (ADMIN, PRODUCER, ARTIST, AUDITOR) ayants des privilèges
    associés à leurs rôles respectifs (ADMIN et CLIENT) et des limites associées à leurs profils (COMMON et APP).
    Ils seront associés aux tablespaces qui leur convient.
    Les nouvelles fonctionnalités envisagées par le chef de projet impliquent la création de requêtes complexes
    ("The trendiest album", "The frequency of album published per year", "The number of auditors per country",
    "The 3 most productive artists"), de vues ("Price per album", "The best song of the year", "Number of listenings in the year",
    "Last 5 albums listened to"), de fonctions ("The last music listened to by a auditor",
    "The history of someone") et d'une instruction composée permettant de créer un nouvel album lorsqu'on
    ajoute une musique avec un album non-existant.

*/

-- CONFIGURE SGA TO 999Mo
ALTER system SET sga_target=999M SCOPE=SPFILE;

-- CONFIGURE PGA TO 200Mo per user so 200*4 = 800Mo
ALTER system SET pga_aggregate_target=800M;


-- TABLESPACES
CREATE TABLESPACE TD_TBS_LABELS
DATAFILE 'tbs_labels.dbf' SIZE 10M
AUTOEXTEND ON NEXT 20M
MAXSIZE 100M
ONLINE;

CREATE TABLESPACE TD_TBS_CLIENTS
DATAFILE 'tbs_clients.dbf' SIZE 10M
AUTOEXTEND ON NEXT 20M
MAXSIZE 100M
ONLINE;

CREATE UNDO TABLESPACE TD_TBS_ARCHIVE
DATAFILE 'tbs_archive.dbf' SIZE 10M
AUTOEXTEND ON NEXT 20M
MAXSIZE 100M;

CREATE TEMPORARY TABLESPACE TD_TBS_USERDATA
TEMPFILE 'tbs_userdata.dbf' SIZE 10M
AUTOEXTEND ON NEXT 20M
MAXSIZE 100M;


-- TABLES
CREATE TABLE SYSTEM.TD_ARTIST (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL
);

CREATE TABLE SYSTEM.TD_ALBUM (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    RELEASE_DATE DATE NULL
)
TABLESPACE TD_TBS_LABELS;

CREATE TABLE SYSTEM.TD_AUDITOR (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    MAIL VARCHAR2(255) NULL,
    AGE NUMBER(8) NULL,
    COUNTRY VARCHAR2(255) NULL
)
TABLESPACE TD_TBS_CLIENTS;

CREATE TABLE SYSTEM.TD_SONG (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    PRICE FLOAT NULL,
    ALBUM_ID NUMBER(8) NULL,
    CONSTRAINT FK_SONG_ALBUM FOREIGN KEY (ALBUM_ID)
        REFERENCES TD_ALBUM(ID)
)
TABLESPACE TD_TBS_LABELS;

CREATE TABLE SYSTEM.TD_LISTENING (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    AUDITOR_ID NUMBER(8) NOT NULL,
    SONG_ID NUMBER(8) NOT NULL,
    LISTEN_DATE DATE NULL,
    CONSTRAINT FK_LISTENING_AUDITOR FOREIGN KEY (AUDITOR_ID)
        REFERENCES TD_AUDITOR(ID),
    CONSTRAINT FK_LISTENING_SONG FOREIGN KEY (SONG_ID)
        REFERENCES TD_SONG(ID)
);

CREATE TABLE SYSTEM.TD_PLAYLIST (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    AUDITOR_ID NUMBER(8) NOT NULL,
    CONSTRAINT FK_PLAYLIST_AUDITOR FOREIGN KEY (AUDITOR_ID)
        REFERENCES TD_AUDITOR(ID)
);

CREATE TABLE SYSTEM.TD_COMPOSED_OF (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    PLAYLIST_ID NUMBER(8) NOT NULL,
    SONG_ID NUMBER(8) NOT NULL,
    CONSTRAINT FK_COMPOSEDOF_PLAYLIST FOREIGN KEY (PLAYLIST_ID)
        REFERENCES TD_PLAYLIST(ID),
    CONSTRAINT FK_COMPOSEDOF_SONG FOREIGN KEY (SONG_ID)
        REFERENCES TD_SONG(ID)
);

CREATE TABLE SYSTEM.TD_PRODUCED_BY (
    ID NUMBER(8) GENERATED AS IDENTITY
        PRIMARY KEY,
    SONG_ID NUMBER(8) NOT NULL,
    ARTIST_ID NUMBER(8) NOT NULL,
    CONSTRAINT FK_PRODUCEDBY_SONG FOREIGN KEY (SONG_ID)
        REFERENCES TD_SONG(ID),
    CONSTRAINT FK_PRODUCEDBY_ARTIST FOREIGN KEY (ARTIST_ID)
        REFERENCES TD_ARTIST(ID)
);

--------------------- PARTIE 2 ---------------------

-- PROFILES
CREATE PROFILE TD_PROFILE_COMMON LIMIT
    SESSIONS_PER_USER 8
    CPU_PER_SESSION UNLIMITED
    CPU_PER_CALL 2000
    CONNECT_TIME 200
    IDLE_TIME 10;

CREATE PROFILE TD_PROFILE_APP LIMIT
    FAILED_LOGIN_ATTEMPTS 5
    PASSWORD_LIFE_TIME 30
    PASSWORD_REUSE_TIME 60
    PASSWORD_REUSE_MAX 2
    PASSWORD_LOCK_TIME 5
    PASSWORD_GRACE_TIME 7;


-- ROLES
CREATE ROLE TD_ROLE_ADMIN IDENTIFIED EXTERNALLY;
CREATE ROLE TD_ROLE_CLIENT IDENTIFIED EXTERNALLY;


-- USERS
CREATE USER TD_USER_ADMIN
    TEMPORARY TABLESPACE TD_TBS_USERDATA
    IDENTIFIED BY adm1n;

CREATE USER TD_USER_PRODUCER
    IDENTIFIED BY pr0duc3r
    TEMPORARY TABLESPACE TD_TBS_USERDATA
    DEFAULT TABLESPACE TD_TBS_LABELS
    PROFILE TD_PROFILE_COMMON;

CREATE USER TD_USER_ARTIST
    IDENTIFIED BY art1st
    TEMPORARY TABLESPACE TD_TBS_USERDATA
    PROFILE TD_PROFILE_APP;

CREATE USER TD_USER_AUDITOR
    IDENTIFIED BY aud1t0r
    TEMPORARY TABLESPACE TD_TBS_USERDATA
    PROFILE TD_PROFILE_APP;


-- PRIVILEGES
GRANT CREATE SESSION TO TD_USER_ADMIN;
GRANT CREATE SESSION TO TD_USER_PRODUCER;
GRANT CREATE SESSION TO TD_USER_ARTIST;
GRANT CREATE SESSION TO TD_USER_AUDITOR;

GRANT TD_ROLE_ADMIN TO TD_USER_ADMIN;
GRANT TD_ROLE_CLIENT TO TD_USER_ARTIST;
GRANT TD_ROLE_CLIENT TO TD_USER_AUDITOR;

GRANT CREATE ANY TABLE, ALTER ANY TABLE, DROP ANY TABLE TO TD_ROLE_ADMIN;
GRANT SELECT ANY TABLE, UPDATE ANY TABLE, INSERT ANY TABLE, DELETE ANY TABLE TO TD_ROLE_ADMIN;

GRANT SELECT ON SYSTEM.TD_ARTIST TO TD_ROLE_CLIENT;
GRANT SELECT ON SYSTEM.TD_ALBUM TO TD_ROLE_CLIENT;
GRANT SELECT ON SYSTEM.TD_AUDITOR TO TD_ROLE_CLIENT;
GRANT SELECT ON SYSTEM.TD_SONG TO TD_ROLE_CLIENT;
GRANT SELECT ON SYSTEM.TD_LISTENING TO TD_ROLE_CLIENT;
GRANT SELECT ON SYSTEM.TD_PRODUCED_BY TO TD_ROLE_CLIENT;

GRANT SELECT, INSERT ON SYSTEM.TD_ARTIST TO TD_USER_PRODUCER;
GRANT SELECT, INSERT ON SYSTEM.TD_ALBUM TO TD_USER_PRODUCER;
GRANT SELECT, INSERT ON SYSTEM.TD_SONG TO TD_USER_PRODUCER;
GRANT SELECT, INSERT ON SYSTEM.TD_PRODUCED_BY TO TD_USER_PRODUCER;

GRANT SELECT, INSERT, UPDATE, DELETE ON SYSTEM.TD_ARTIST TO TD_USER_ARTIST;

GRANT SELECT, INSERT, UPDATE, DELETE ON SYSTEM.TD_AUDITOR TO TD_USER_AUDITOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON SYSTEM.TD_PLAYLIST TO TD_USER_AUDITOR;


-- REQUESTS

-- "The trendiest album"
SELECT A.NAME AS THE_TRENDIEST_ALBUM
FROM SYSTEM.TD_LISTENING L
INNER JOIN SYSTEM.TD_SONG S ON L.SONG_ID = S.ID
INNER JOIN SYSTEM.TD_ALBUM A ON S.ALBUM_ID = A.ID
WHERE L.ID IN (
        SELECT COUNT(L.ID)
        FROM SYSTEM.TD_LISTENING L
        INNER JOIN SYSTEM.TD_SONG S ON L.SONG_ID = S.ID
        INNER JOIN SYSTEM.TD_ALBUM A ON S.ALBUM_ID = A.ID
        GROUP BY A.NAME
    )
GROUP BY A.NAME;

-- "The frequency of album published per year"
SELECT AVG(COUNT(A.ID)) AS FREQUENCY_RELEASES
FROM SYSTEM.TD_ALBUM A
GROUP BY EXTRACT(YEAR FROM A.RELEASE_DATE);

-- "The number of auditors per country"
SELECT A.COUNTRY, COUNT(DISTINCT A.NAME) AS AUDITORS
FROM SYSTEM.TD_LISTENING L
INNER JOIN SYSTEM.TD_AUDITOR A ON A.ID = L.AUDITOR_ID
GROUP BY A.COUNTRY;

-- "The 3 most productive artists"
SELECT * FROM (
    SELECT AR.NAME AS MOST_PRODUCTIVE_ARTISTS
    FROM SYSTEM.TD_ARTIST AR
    INNER JOIN SYSTEM.TD_PRODUCED_BY PB ON AR.ID = PB.ARTIST_ID
    INNER JOIN SYSTEM.TD_SONG S ON PB.SONG_ID = S.ID
    INNER JOIN SYSTEM.TD_ALBUM AL ON S.ALBUM_ID = AL.ID
    GROUP BY AR.NAME
    ORDER BY COUNT(S.NAME) DESC
)
WHERE ROWNUM <= 3;


-- VUES

-- "Price per album"
CREATE OR REPLACE VIEW TD_V_PRICE_PER_ALBUM AS
   SELECT A.NAME AS ALBUM, SUM(S.PRICE) AS TOTAL_PRICE
    FROM SYSTEM.TD_SONG S
    INNER JOIN SYSTEM.TD_ALBUM A ON S.ALBUM_ID = A.ID
    GROUP BY A.NAME
    ORDER BY A.NAME;

-- "The best song of the year"
CREATE OR REPLACE VIEW TD_V_BEST_SONG_OF_YEAR AS
    SELECT DISTINCT S.NAME AS THE_BEST_SONG_OF_THE_YEAR
    FROM SYSTEM.TD_LISTENING L
    INNER JOIN SYSTEM.TD_SONG S ON L.SONG_ID = S.ID
    WHERE S.ID = (
        SELECT MAX(COUNT(L.ID))
        FROM SYSTEM.TD_LISTENING L
        INNER JOIN SYSTEM.TD_SONG S ON L.SONG_ID = S.ID
        GROUP BY S.NAME
    );

-- "Number of listenings in the year"
CREATE OR REPLACE VIEW TD_V_LISTENINGS_IN_YEAR AS
    SELECT COUNT(*) AS LISTENINGS_THIS_YEAR
    FROM SYSTEM.TD_LISTENING L
    WHERE EXTRACT(YEAR FROM L.LISTEN_DATE) = EXTRACT(YEAR FROM SYSDATE);

-- "Last 3 albums listened to"
CREATE MATERIALIZED VIEW TD_V_LAST_ALBUMS_LISTENED
TABLESPACE TD_TBS_CLIENTS
REFRESH FORCE START WITH SYSDATE NEXT SYSDATE+1
AS SELECT * FROM (
    SELECT A.NAME
    FROM SYSTEM.TD_LISTENING L
    INNER JOIN SYSTEM.TD_SONG S ON L.SONG_ID = S.ID
    INNER JOIN SYSTEM.TD_ALBUM A ON S.ALBUM_ID = A.ID
    ORDER BY L.LISTEN_DATE DESC
)
WHERE ROWNUM <= 5;


-- FUNCTIONS

-- "The last music listened to by a auditor"
CREATE OR REPLACE FUNCTION TD_LAST_MUSIC_LISTENED_BY(USER_ID NUMBER(8))
RETURN VARCHAR(255) IS SONG_NAME VARCHAR2(255);
BEGIN
	SELECT S.NAME INTO SONG_NAME
	        FROM SYSTEM.TD_SONG S
            INNER JOIN SYSTEM.TD_LISTENING L ON S.ID = L.SONG_ID
            INNER JOIN SYSTEM.TD_AUDITOR A ON L.AUDITOR_ID = A.ID
	        WHERE A.ID = USER_ID
            ORDER BY L.LISTEN_DATE DESC;
	RETURN SONG_NAME;
END;

-- "The history of someone"
CREATE OR REPLACE FUNCTION TD_HISTORY_OF(USER_ID IN NUMBER(8))
RETURN VARCHAR(255) IS SONG_NAME VARCHAR2(255);
BEGIN
	SELECT S.NAME INTO SONG_NAME
	        FROM SYSTEM.TD_SONG S
            INNER JOIN SYSTEM.TD_LISTENING L ON S.ID = L.SONG_ID
            INNER JOIN SYSTEM.TD_AUDITOR A ON L.AUDITOR_ID = A.ID
	        WHERE A.ID = USER_ID
            ORDER BY L.LISTEN_DATE DESC;
	RETURN SONG_NAME;
END;
